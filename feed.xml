<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://richard5678.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://richard5678.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-08-25T06:28:27+00:00</updated><id>https://richard5678.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">Implementing Gradient Boosting Tree from scratch in Python</title><link href="https://richard5678.github.io/blog/2021/gb-tree/" rel="alternate" type="text/html" title="Implementing Gradient Boosting Tree from scratch in Python" /><published>2021-12-10T00:01:00+00:00</published><updated>2021-12-10T00:01:00+00:00</updated><id>https://richard5678.github.io/blog/2021/gb-tree</id><content type="html" xml:base="https://richard5678.github.io/blog/2021/gb-tree/"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>This blog covers the theoretical framework behind Gradient Boosting Tree and its implementation in Python without using any libraries that directly implement it.</p>

<h2 id="motivation">Motivation</h2>

<p>See the previous blog on <a href="/blog/2021/random-forest/">Random Forest</a>.</p>

<h2 id="what-is-gradient-boosting-tree">What is Gradient Boosting Tree?</h2>

<p>Similar to Random Forest, Gradient Boosting Tree (GBT) also consists of a collection of decision trees. However, unlike Random Forest, which trains those trees independently, GBT trains its trees sequentially. The next tree uses the residuals of the previous tree as its target variable instead of the original labels in classification tasks. This means that classification tasks for GBT are treated as regression problems since residuals are used as the target variable.</p>

<p>When constructing the decision tree, the loss is calculated using residuals instead of labels. Below, we provide an example of how this works for classification tasks. For a visual demonstration of the algorithm, refer to <a href="https://www.youtube.com/watch?v=jxuNLH5dXCs&amp;t=730s">StatQuest</a>. Note that the video omits details on how the decision tree is constructed. In the example below, MSE loss is used.</p>

<p>To find the optimal split point, each value of all features is considered. The loss of each split is calculated using the weighted MSE of the sub-groups. The predicted value of each sub-group is the mean of all residuals in that group.</p>

<hr />

<h2 id="implementation">Implementation</h2>

<h3 id="the-gbt-function">The <code class="language-plaintext highlighter-rouge">gbt</code> Function</h3>

<p>The core of the program is the <code class="language-plaintext highlighter-rouge">gbt</code> function:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/gb_tree/gradientBoosting1-480.webp 480w,/assets/img/gb_tree/gradientBoosting1-800.webp 800w,/assets/img/gb_tree/gradientBoosting1-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/gb_tree/gradientBoosting1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>This function calls the <code class="language-plaintext highlighter-rouge">build_tree</code> function a specified number of times (<code class="language-plaintext highlighter-rouge">treeLength</code>) and updates a progress bar accordingly. The trees returned from <code class="language-plaintext highlighter-rouge">build_tree</code> are stored in a list named <code class="language-plaintext highlighter-rouge">decision_trees</code>.</p>

<hr />

<h3 id="the-build_tree-function">The <code class="language-plaintext highlighter-rouge">build_tree</code> Function</h3>

<p>The steps to build a tree are as follows:</p>

<ol>
  <li><strong>Find optimal split using MSE loss</strong> (lines 47–55).</li>
  <li><strong>Initialize the node and fill in the decision boundary</strong> (lines 58–62).</li>
  <li><strong>Construct left and right sub-trees</strong> under certain conditions (lines 66–69).</li>
  <li><strong>Find the output of the leaf node</strong> and update predictions and residuals (lines 72–78).</li>
</ol>

<h4 id="key-differences-from-random-forest">Key Differences from Random Forest</h4>

<ul>
  <li>The loss function for finding the optimal split uses MSE since GBT treats classification as a regression problem.</li>
  <li>Updates at leaf nodes include recalculating predictions and residuals.</li>
</ul>

<h4 id="loss-function">Loss Function</h4>

<p>For GBT classification tasks, the Mean Squared Error (MSE) is used to find the optimal split:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-6 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/gb_tree/gradientBoosting4-480.webp 480w,/assets/img/gb_tree/gradientBoosting4-800.webp 800w,/assets/img/gb_tree/gradientBoosting4-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/gb_tree/gradientBoosting4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>An example:</p>

<ul>
  <li>Residuals: 0.1, 0, -0.1</li>
  <li>Predicted value: 0</li>
  <li>MSE: \(\frac{(0.1 - 0)^2 + (-0.1 - 0)^2 + (0 - 0)^2}{3} = \frac{1}{150}\)</li>
</ul>

<hr />

<h3 id="node-initialization-and-split">Node Initialization and Split</h3>

<p>After finding the optimal split point, the node is initialized, and the split point is stored.</p>

<h4 id="conditions-for-extending-sub-trees">Conditions for Extending Sub-Trees:</h4>

<ul>
  <li>Both left and right sub-groups must have positive lengths.</li>
  <li>The weighted MSE of the split must be less than the MSE of the current node.</li>
</ul>

<h4 id="output-calculation-for-leaf-nodes">Output Calculation for Leaf Nodes</h4>

<p>At leaf nodes, the output is computed as:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-6 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/gb_tree/gradientBoosting5-480.webp 480w,/assets/img/gb_tree/gradientBoosting5-800.webp 800w,/assets/img/gb_tree/gradientBoosting5-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/gb_tree/gradientBoosting5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>Predictions are updated using:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-6 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/gb_tree/gradientBoosting6-480.webp 480w,/assets/img/gb_tree/gradientBoosting6-800.webp 800w,/assets/img/gb_tree/gradientBoosting6-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/gb_tree/gradientBoosting6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>Residuals are updated using:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-6 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/gb_tree/gradientBoosting7-480.webp 480w,/assets/img/gb_tree/gradientBoosting7-800.webp 800w,/assets/img/gb_tree/gradientBoosting7-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/gb_tree/gradientBoosting7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h3 id="making-predictions">Making Predictions</h3>

<p>To make a prediction for (x), the <code class="language-plaintext highlighter-rouge">predict</code> function passes (x), all trained trees, initial predictions, and the learning rate. Each tree’s output is summed and passed to a sigmoid function to generate probabilities. Predictions are made using a threshold of 0.5.</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/gb_tree/gradientBoosting9-480.webp 480w,/assets/img/gb_tree/gradientBoosting9-800.webp 800w,/assets/img/gb_tree/gradientBoosting9-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/gb_tree/gradientBoosting9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h3 id="cross-validation">Cross-Validation</h3>

<p>The <code class="language-plaintext highlighter-rouge">eval</code> function performs n-fold cross-validation on the dataset:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/gb_tree/gradientBoosting10-480.webp 480w,/assets/img/gb_tree/gradientBoosting10-800.webp 800w,/assets/img/gb_tree/gradientBoosting10-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/gb_tree/gradientBoosting10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h2 id="results">Results</h2>

<p>Using 10-fold cross-validation, an accuracy of 86% was achieved on the validation set:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-12 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/gb_tree/gradientBoosting11-480.webp 480w,/assets/img/gb_tree/gradientBoosting11-800.webp 800w,/assets/img/gb_tree/gradientBoosting11-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/gb_tree/gradientBoosting11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h2 id="parameter-tuning">Parameter Tuning</h2>

<p>GBT requires setting three hyperparameters:</p>

<ol>
  <li><strong>Max Depth</strong></li>
  <li><strong>Number of Trees</strong></li>
  <li><strong>Learning Rate</strong></li>
</ol>

<p>To find the best combination, all possible values are tested using the sklearn library:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-11 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/gb_tree/gradientBoosting12-480.webp 480w,/assets/img/gb_tree/gradientBoosting12-800.webp 800w,/assets/img/gb_tree/gradientBoosting12-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/gb_tree/gradientBoosting12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>Results showed that 200 trees with a max depth of 5 and a learning rate of 0.1 achieved the best validation accuracy (85.94%), slightly lower than the custom implementation.</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-12 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/gb_tree/gradientBoosting13-480.webp 480w,/assets/img/gb_tree/gradientBoosting13-800.webp 800w,/assets/img/gb_tree/gradientBoosting13-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/gb_tree/gradientBoosting13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h2 id="implementation-1">Implementation</h2>

<p>For full implementation details, see the <a href="https://github.com/Richard5678/Machine-Learning/blob/main/heart%20problem%20-%20gradient%20boosted%20tree.ipynb">GitHub repository</a>.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="math" /><category term="ml" /><summary type="html"><![CDATA[This blog covers the theoretical framework behind Gradient Boosting Tree and its implementation in Python without using any libraries that directly implement it.]]></summary></entry><entry><title type="html">Implementing Random Forest from Scratch in Python</title><link href="https://richard5678.github.io/blog/2021/random-forest/" rel="alternate" type="text/html" title="Implementing Random Forest from Scratch in Python" /><published>2021-12-07T00:01:00+00:00</published><updated>2021-12-07T00:01:00+00:00</updated><id>https://richard5678.github.io/blog/2021/random-forest</id><content type="html" xml:base="https://richard5678.github.io/blog/2021/random-forest/"><![CDATA[<p>This article is a walk-through of an implementation of a random forest classifier without using any implementations from existing libraries.</p>

<hr />

<h2 id="motivation">Motivation</h2>

<p>I am recently studying different kinds of machine learning algorithms. The most effective way of learning different algorithms is to implement them concretely. With this in mind, I have previously implemented linear and logistic regressions, which are relatively simple models.</p>

<p>My next target is a type of decision tree algorithm. After some research, it became apparent that random forest and gradient boosting trees are the two most popular and effective tree-based algorithms. Unlike many other types of algorithms, like convolutional neural networks, there is very limited information about how these two algorithms are implemented in “easy-to-understand” code.</p>

<p>After implementing my own version of a random forest following weeks of struggle, I want to share my implementation and the lessons I have learned.</p>

<hr />

<h2 id="what-is-random-forest">What is Random Forest?</h2>

<p>The simple answer is: Random Forest is a type of decision tree algorithm that uses bagging (training multiple trees).</p>

<p>A decision tree asks a question at each node and splits the data into two child nodes: one with examples that respond “yes” to the question and the other with examples that respond “no.” The goal of a split is to group examples with similar labels together. For example:</p>

<ul>
  <li>In regression, group similar target values together.</li>
  <li>In classification, group similar labels together.</li>
</ul>

<p>To achieve this, we define a loss function that quantifies the quality of a split:</p>

<ul>
  <li><strong>Regression Tasks:</strong> Use Mean Squared Error (MSE).</li>
  <li><strong>Classification Tasks:</strong> Use Gini Index (used in this example).</li>
</ul>

<p>A Random Forest consists of multiple decision trees, each trained on a subset of features and training examples. At test time, it predicts by taking the majority class from all the trees in classification tasks.</p>

<hr />

<h2 id="implementation">Implementation</h2>

<h3 id="steps-for-training-a-single-tree-in-random-forest">Steps for Training a Single Tree in Random Forest:</h3>

<ol>
  <li>Randomly sample features and training examples.</li>
  <li>Find the optimal split by calculating the loss for each possible value of the given feature.</li>
  <li>Split the data at the current node based on the optimal split point.</li>
  <li>Recursively build the left and right subtrees until the maximum depth is reached.</li>
</ol>

<h3 id="core-program-function-random_forest">Core Program Function: <code class="language-plaintext highlighter-rouge">random_forest</code></h3>

<p>The <code class="language-plaintext highlighter-rouge">random_forest</code> function calls the <code class="language-plaintext highlighter-rouge">build_tree</code> function multiple times (equal to the number of trees) and updates a progress bar. The resulting trees are stored in a list named <code class="language-plaintext highlighter-rouge">decision_trees</code>.</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/random_forest/random1-480.webp 480w,/assets/img/random_forest/random1-800.webp 800w,/assets/img/random_forest/random1-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/random_forest/random1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h3 id="recursive-tree-building-build_tree">Recursive Tree Building: <code class="language-plaintext highlighter-rouge">build_tree</code></h3>

<p>The function <code class="language-plaintext highlighter-rouge">build_tree</code> constructs the decision tree recursively. Its base case triggers when:</p>

<ul>
  <li>The maximum depth is reached.</li>
  <li>There are no features left to split.</li>
</ul>

<p><strong>Key Sections in <code class="language-plaintext highlighter-rouge">build_tree</code>:</strong></p>

<ol>
  <li><strong>Finding the Best Split (Lines 41–49):</strong><br />
Sample √(total features), then calculate Gini index for each possible split.</li>
</ol>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/random_forest/random3-480.webp 480w,/assets/img/random_forest/random3-800.webp 800w,/assets/img/random_forest/random3-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/random_forest/random3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<ol>
  <li><strong>Calculating Gini Index:</strong><br />
The Gini index formula is:</li>
</ol>

<div class="d-flex justify-content-center">
    <div class="col-sm-6 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/random_forest/random5-480.webp 480w,/assets/img/random_forest/random5-800.webp 800w,/assets/img/random_forest/random5-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/random_forest/random5.png" class="img-fluid rounded z-depth-1" width="500" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>where (p_i) is the fraction of examples with label (i).</p>

<p>A lower Gini index indicates a better split, as it ensures higher node purity.</p>

<ol>
  <li>
    <p><strong>Construct Node (Lines 52–55):</strong><br />
Initialize the node and store the split point.</p>
  </li>
  <li>
    <p><strong>Build Subtrees (Lines 59–62):</strong><br />
Recursively build left and right subtrees if:</p>

    <ul>
      <li>Both sub-groups have examples.</li>
      <li>The split improves the Gini index.</li>
    </ul>
  </li>
  <li>
    <p><strong>Label Leaf Nodes (Lines 65–73):</strong><br />
Assign the majority label to the leaf node.</p>
  </li>
</ol>

<div class="d-flex justify-content-center">
    <div class="col-sm-12 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/random_forest/random2-480.webp 480w,/assets/img/random_forest/random2-800.webp 800w,/assets/img/random_forest/random2-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/random_forest/random2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h3 id="prediction-and-evaluation">Prediction and Evaluation</h3>

<p>To predict on a new input (x), the <code class="language-plaintext highlighter-rouge">classify</code> function traverses the tree from the root to the appropriate leaf.</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/random_forest/random8-480.webp 480w,/assets/img/random_forest/random8-800.webp 800w,/assets/img/random_forest/random8-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/random_forest/random8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>To evaluate the model, an n-fold cross-validation is performed using the <code class="language-plaintext highlighter-rouge">eval</code> function.</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/random_forest/random10-480.webp 480w,/assets/img/random_forest/random10-800.webp 800w,/assets/img/random_forest/random10-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/random_forest/random10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h2 id="results">Results</h2>

<p>Using 10-fold cross-validation, the implementation achieves <strong>86% accuracy</strong> on the validation set.</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-12 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/random_forest/random12-480.webp 480w,/assets/img/random_forest/random12-800.webp 800w,/assets/img/random_forest/random12-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/random_forest/random12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h2 id="parameter-tuning">Parameter Tuning</h2>

<p>In Random Forest, two main hyperparameters must be set:</p>

<ol>
  <li><strong>Max Depth</strong></li>
  <li><strong>Number of Trees</strong></li>
</ol>

<p>Using the sklearn library for speed, we tested combinations of these parameters. The best results:</p>

<ul>
  <li>50 trees</li>
  <li>Max depth = 6<br />
achieved <strong>85.93% validation accuracy.</strong></li>
</ul>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/random_forest/random14-480.webp 480w,/assets/img/random_forest/random14-800.webp 800w,/assets/img/random_forest/random14-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/random_forest/random14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h2 id="full-implementation">Full Implementation</h2>

<p>For the complete implementation, visit the <a href="https://github.com/Richard5678/Machine-Learning/blob/main/heart%20problem%20-%20random%20forest.ipynb">GitHub repository</a>.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="math" /><category term="ml" /><summary type="html"><![CDATA[This article is a walk-through of an implementation of random forest classifier without using any implementations from existing libraries.]]></summary></entry><entry><title type="html">Implementing AlphaZero from Scratch for Gomoku</title><link href="https://richard5678.github.io/blog/2021/mcts/" rel="alternate" type="text/html" title="Implementing AlphaZero from Scratch for Gomoku" /><published>2021-11-29T00:01:00+00:00</published><updated>2021-11-29T00:01:00+00:00</updated><id>https://richard5678.github.io/blog/2021/mcts</id><content type="html" xml:base="https://richard5678.github.io/blog/2021/mcts/"><![CDATA[<p>This project uses Monte Carlo Tree Search (MCTS) to construct an AI for Gomoku on a 19x19 board. The complete implementation is available on <a href="https://github.com/Richard5678/gomoku-ai">GitHub</a>.</p>

<p>For board games, we can imagine the human player standing at the root of the tree, where its children nodes represent all possible moves the next player (AI) can make. We expand the tree recursively until we reach a terminal state (someone has won). The problem with this approach is that the tree grows exponentially, making it impossible to explore all possibilities on a 19x19 board.</p>

<h2 id="tree-search-algorithms">Tree Search Algorithms</h2>

<h3 id="1-minimax">1. Minimax</h3>

<p>Minimax improves upon brute-force tree search by introducing a value function and a maximum depth. When the search tree reaches the max depth, the value function evaluates the state of the board at the leaf nodes. The evaluation result is backpropagated to the root of the tree by alternating between choosing the max or min of all child nodes.</p>

<p>For example, suppose the max depth is 3, and we are standing at the root node ready to move down the tree:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-6 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/mcts/gomoku1-480.webp 480w,/assets/img/mcts/gomoku1-800.webp 800w,/assets/img/mcts/gomoku1-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/mcts/gomoku1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<ul>
  <li>A higher value from the value network indicates a better state for the AI player. At the root, we choose the child with the max value.</li>
  <li>At depth 1, it is the opponent’s turn, and they will minimize the value for the AI player.</li>
  <li>This alternating max/min process continues until reaching the leaf nodes.</li>
</ul>

<p>Eventually, we choose the move represented by the child node with the highest value at the root (e.g., 4 &gt; 3).</p>

<h4 id="limitation">Limitation:</h4>

<p>Minimax requires a value function, which is often difficult to define. This challenge leads to the use of MCTS.</p>

<h3 id="2-monte-carlo-tree-search-mcts">2. Monte Carlo Tree Search (MCTS)</h3>

<p>MCTS addresses the shortcomings of Minimax by removing the need for a value function. It has four main steps:</p>

<div class="d-flex justify-content-center mt-3 mt-md-0">
    

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/mcts/gomoku2-480.webp 480w,/assets/img/mcts/gomoku2-800.webp 800w,/assets/img/mcts/gomoku2-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/mcts/gomoku2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

</div>

<p>During the <strong>selection phase</strong>, we move toward the child node with the highest Upper Confidence Bound (UCB) value, calculated as:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-6 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/mcts/gomoku4-480.webp 480w,/assets/img/mcts/gomoku4-800.webp 800w,/assets/img/mcts/gomoku4-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/mcts/gomoku4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<ul>
  <li>The mean node value is the number of AI wins divided by the number of visits to the node.</li>
</ul>

<p>The simulation phase (rollout) randomly places stones on the board until someone wins.</p>

<p>After enough iterations, we choose the move represented by the child node of the root with the most visits (highest denominator). MCTS converges to the optimal solution as the number of iterations increases.</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/mcts/gomoku5-480.webp 480w,/assets/img/mcts/gomoku5-800.webp 800w,/assets/img/mcts/gomoku5-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/mcts/gomoku5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<h3 id="simulation-example">Simulation Example</h3>

<p>Here’s an example of how value updates work during simulation:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/mcts/gomoku3-480.webp 480w,/assets/img/mcts/gomoku3-800.webp 800w,/assets/img/mcts/gomoku3-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/mcts/gomoku3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<h2 id="challenges-during-implementation">Challenges During Implementation</h2>

<h3 id="problem-1-limited-computational-power">Problem 1: Limited Computational Power</h3>

<p>MCTS does not perform well on a 19x19 board when considering all possible moves during the expansion phase. For example:</p>

<ul>
  <li>If MCTS runs for 50,000 iterations and there are 360 possible moves after Black’s first move, each move is simulated just over 100 times on average, which is insufficient.</li>
</ul>

<h4 id="solution">Solution</h4>

<p>Based on Gomoku’s rules, I assumed the best move would always be near existing stones. During the expansion phase, I limited possible actions to moves that share the same block with an existing stone. This assumption greatly improved predictions without losing much generality.</p>

<h3 id="problem-2-rollout-randomness">Problem 2: Rollout Randomness</h3>

<p>The simulation stage introduced too much randomness, causing the AI to prioritize forming its own live 3 over blocking the opponent’s live 3. For example:</p>

<ul>
  <li>When Black has a live 3 and White only has a live 2, White should block Black’s live 3. However, the AI often places a stone to form its own live 3 instead.</li>
</ul>

<h4 id="solution-1">Solution</h4>

<p>I implemented functions to check for live 3 and consecutive 4 formations to ensure appropriate moves are chosen. Additionally, I referred to the <a href="https://storage.googleapis.com/deepmind-media/alphago/AlphaGoNaturePaper.pdf">AlphaGo paper</a>, which trains a fast policy network for the rollout phase, limiting randomness and improving performance.</p>

<div class="col-sm mt-3 mt-md-0">
    

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/mcts/gomoku6-480.webp 480w,/assets/img/mcts/gomoku6-800.webp 800w,/assets/img/mcts/gomoku6-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/mcts/gomoku6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

</div>

<h3 id="features">Features</h3>

<ul>
  <li>A blue quarter-circle indicates the last move.</li>
  <li>A bar on the right displays the winning percentage for both players based on simulations.</li>
  <li>A reset button resets the board to the initial state.</li>
  <li>An undo button removes the last human move and the subsequent AI move.</li>
</ul>]]></content><author><name></name></author><category term="sample-posts" /><category term="ml" /><summary type="html"><![CDATA[MCTS for 19x19 Gomoku]]></summary></entry><entry><title type="html">Gradient Descent in Machine Learning</title><link href="https://richard5678.github.io/blog/2021/gradient-descent/" rel="alternate" type="text/html" title="Gradient Descent in Machine Learning" /><published>2021-11-04T00:01:00+00:00</published><updated>2021-11-04T00:01:00+00:00</updated><id>https://richard5678.github.io/blog/2021/gradient-descent</id><content type="html" xml:base="https://richard5678.github.io/blog/2021/gradient-descent/"><![CDATA[<p>This article covers the implementation and theoretical framework of gradient descent. Topics such as feature scaling and cross-validation are included to improve testing and training.<br />
Most of the theoretical work presented below is based on <a href="https://github.com/maxim5/cs229-2018-autumn/blob/main/notes/cs229-notes1.pdf">Prof. Andrew Ng’s notes</a>.</p>

<hr />

<h2 id="theoretical-framework">Theoretical Framework</h2>

<p>The basic idea of gradient descent is to update the parameter \(\theta\) toward the steepest direction of the cost function \(J(\theta)\).<br />
Its update rule is given by:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/grad/grad1-480.webp 480w,/assets/img/grad/grad1-800.webp 800w,/assets/img/grad/grad1-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/grad/grad1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>Where \(\alpha\) is the learning rate that determines the size of each update step.</p>

<p>The loss function \(J(\theta)\) measures how well our model fits the dataset. A common choice is the <strong>mean squared error (MSE)</strong>, which is given by:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/grad/grad2-480.webp 480w,/assets/img/grad/grad2-800.webp 800w,/assets/img/grad/grad2-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/grad/grad2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>The additional 2 in the denominator simplifies the derivative later. Our task becomes minimizing \(J(\theta)\).<br />
Taking the partial derivative of \(J(\theta)\) gives:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/grad/grad3-480.webp 480w,/assets/img/grad/grad3-800.webp 800w,/assets/img/grad/grad3-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/grad/grad3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>Hence, the update rule becomes:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/grad/grad4-480.webp 480w,/assets/img/grad/grad4-800.webp 800w,/assets/img/grad/grad4-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/grad/grad4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h3 id="matrix-form-update-rule">Matrix Form Update Rule</h3>

<p>The update rule described above updates entries in \(\theta\) one at a time, making it messy to implement. Let us see how we can perform the update rule simultaneously for all entries of \(\theta\) using matrix multiplication.</p>

<p>Define the design matrix \(X\) as:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-7 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/grad/grad5-480.webp 480w,/assets/img/grad/grad5-800.webp 800w,/assets/img/grad/grad5-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/grad/grad5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>Where each row is a training example. Observe that:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/grad/grad6-480.webp 480w,/assets/img/grad/grad6-800.webp 800w,/assets/img/grad/grad6-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/grad/grad6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<p>This completes the theoretical background needed to implement the gradient descent algorithm.</p>

<hr />

<h2 id="implementation">Implementation</h2>

<p>Here is an implementation of gradient descent for linear regression:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/grad/grad7-480.webp 480w,/assets/img/grad/grad7-800.webp 800w,/assets/img/grad/grad7-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/grad/grad7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h3 id="feature-scaling">Feature Scaling</h3>

<p>To ensure proper updates, the matrix \(X\) needs to be scaled. Each element in each column of \(X\) is updated as follows:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-4 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/grad/grad8-480.webp 480w,/assets/img/grad/grad8-800.webp 800w,/assets/img/grad/grad8-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/grad/grad8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>

<hr />

<h2 id="cross-validation">Cross-Validation</h2>

<p>After fitting the model using gradient descent, the next step is to test its performance. A common method is <strong>cross-validation</strong>, which involves training the model on a fraction of the data and testing it on the remaining data.</p>

<p><strong>K-Fold Cross-Validation</strong><br />
A more advanced approach is k-fold cross-validation, where the dataset is divided into \(k\) subsets. The model is trained on \(k-1\) subsets and tested on the remaining subset. This process is repeated \(k\) times, and the average testing result is calculated.</p>

<p>Here is an implementation:</p>

<div class="d-flex justify-content-center">
    <div class="col-sm-10 mt-3 mt-md-0">
        

<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      <source class="responsive-img-srcset" srcset="/assets/img/grad/grad10-480.webp 480w,/assets/img/grad/grad10-800.webp 800w,/assets/img/grad/grad10-1400.webp 1400w," sizes="95vw" type="image/webp" />
    
    <img src="/assets/img/grad/grad10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    </div>
</div>]]></content><author><name></name></author><category term="sample-posts" /><category term="math" /><category term="ml" /><summary type="html"><![CDATA[This article covers the implementation and theoretical framework of gradient descent. Topics such as feature scaling and cross-validation are also included to improve testing and training.]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://richard5678.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post" /><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://richard5678.github.io/blog/2021/distill</id><content type="html" xml:base="https://richard5678.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2>

<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine.
You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>.
If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p>

<p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph.
Here is an example:</p>

\[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\]

<p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>

<hr />

<h2 id="citations">Citations</h2>

<p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag.
The key attribute is a reference to the id provided in the bibliography.
The key attribute can take multiple ids, separated by commas.</p>

<p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover).
If you have an appendix, a bibliography is automatically created and populated in it.</p>

<p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover.
However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p>

<hr />

<h2 id="footnotes">Footnotes</h2>

<p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag.
The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p>

<hr />

<h2 id="code-blocks">Code Blocks</h2>

<p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags.
An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>.
For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p>

<d-code block="" language="javascript">
  var x = 25;
  function(x) {
    return x * x;
  }
</d-code>

<p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode.
You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<hr />

<h2 id="interactive-plots">Interactive Plots</h2>

<p>You can add interative plots using plotly + iframes :framed_picture:</p>

<div class="l-page">
  <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe>
</div>

<p>The plot must be generated separately and saved into an HTML file.
To generate the plot that you see above, you can use the following code snippet:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
<span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
<span class="n">df</span><span class="p">,</span>
<span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
<span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure>

<hr />

<h2 id="details-boxes">Details boxes</h2>

<p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p>

<details><summary>Click here to know more</summary>
<p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p>
</details>

<hr />

<h2 id="layouts">Layouts</h2>

<p>The main text column is referred to as the body.
It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p>

<div class="fake-img l-body">
  <p>.l-body</p>
</div>

<p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p>

<div class="fake-img l-page">
  <p>.l-page</p>
</div>

<p>All of these have an outset variant if you want to poke out from the body text a little bit.
For instance:</p>

<div class="fake-img l-body-outset">
  <p>.l-body-outset</p>
</div>

<div class="fake-img l-page-outset">
  <p>.l-page-outset</p>
</div>

<p>Occasionally you’ll want to use the full browser width.
For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>.
You can also inset the element a little from the edge of the browser by using the inset variant.</p>

<div class="fake-img l-screen">
  <p>.l-screen</p>
</div>
<div class="fake-img l-screen-inset">
  <p>.l-screen-inset</p>
</div>

<p>The final layout is for marginalia, asides, and footnotes.
It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p>

<div class="fake-img l-gutter">
  <p>.l-gutter</p>
</div>

<hr />

<h2 id="other-typography">Other Typography?</h2>

<p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p>

<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>

<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>

<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>

<ol>
  <li>First ordered list item</li>
  <li>Another item
⋅⋅* Unordered sub-list.</li>
  <li>Actual numbers don’t matter, just that it’s a number
⋅⋅1. Ordered sub-list</li>
  <li>And another item.</li>
</ol>

<p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p>

<p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>

<ul>
  <li>
    <p>Unordered list can use asterisks</p>
  </li>
  <li>
    <p>Or minuses</p>
  </li>
  <li>
    <p>Or pluses</p>
  </li>
</ul>

<p><a href="https://www.google.com">I’m an inline-style link</a></p>

<p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p>

<p><a href="https://www.mozilla.org">I’m a reference-style link</a></p>

<p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p>

<p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p>

<p>URLs and URLs in angle brackets will automatically get turned into links.
http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes
example.com (but not on Github, for example).</p>

<p>Some text to show that the reference links can follow later.</p>

<p>Here’s our logo (hover to see the title text):</p>

<p>Inline-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1" /></p>

<p>Reference-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2" /></p>

<p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div>

<p>Colons can be used to align columns.</p>

<table>
  <thead>
    <tr>
      <th>Tables</th>
      <th style="text-align: center">Are</th>
      <th style="text-align: right">Cool</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>col 3 is</td>
      <td style="text-align: center">right-aligned</td>
      <td style="text-align: right">$1600</td>
    </tr>
    <tr>
      <td>col 2 is</td>
      <td style="text-align: center">centered</td>
      <td style="text-align: right">$12</td>
    </tr>
    <tr>
      <td>zebra stripes</td>
      <td style="text-align: center">are neat</td>
      <td style="text-align: right">$1</td>
    </tr>
  </tbody>
</table>

<p>There must be at least 3 dashes separating each header cell.
The outer pipes (|) are optional, and you don’t need to make the
raw Markdown line up prettily. You can also use inline Markdown.</p>

<table>
  <thead>
    <tr>
      <th>Markdown</th>
      <th>Less</th>
      <th>Pretty</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>Still</em></td>
      <td><code class="language-plaintext highlighter-rouge">renders</code></td>
      <td><strong>nicely</strong></td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.</p>
</blockquote>

<p>Quote break.</p>

<blockquote>
  <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>
</blockquote>

<p>Here’s a line for us to start with.</p>

<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>

<p>This line is also a separate paragraph, but…
This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><category term="distill" /><category term="formatting" /><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">a post with TikZJax</title><link href="https://richard5678.github.io/blog/2020/tikzjax/" rel="alternate" type="text/html" title="a post with TikZJax" /><published>2020-12-12T22:25:00+00:00</published><updated>2020-12-12T22:25:00+00:00</updated><id>https://richard5678.github.io/blog/2020/tikzjax</id><content type="html" xml:base="https://richard5678.github.io/blog/2020/tikzjax/"><![CDATA[<p>This is an example post with TikZ code. TikZJax converts script tags (containing TikZ code) into SVGs.</p>

<script type="text/tikz">
\begin{tikzpicture}
    \draw[red,fill=black!60!red] (0,0) circle [radius=1.5];
    \draw[green,fill=black!60!green] (0,0) circle [x radius=1.5cm, y radius=10mm];
    \draw[blue,fill=black!60!blue] (0,0) circle [x radius=1cm, y radius=5mm, rotate=30];
\end{tikzpicture}
</script>]]></content><author><name></name></author><category term="sample-posts" /><category term="formatting" /><category term="diagrams" /><summary type="html"><![CDATA[this is what included TikZ code could look like]]></summary></entry><entry><title type="html">a post with giscus comments</title><link href="https://richard5678.github.io/blog/2020/giscus-comments/" rel="alternate" type="text/html" title="a post with giscus comments" /><published>2020-12-10T15:59:00+00:00</published><updated>2020-12-10T15:59:00+00:00</updated><id>https://richard5678.github.io/blog/2020/giscus-comments</id><content type="html" xml:base="https://richard5678.github.io/blog/2020/giscus-comments/"><![CDATA[<p>This post shows how to add GISCUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><category term="comments" /><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">a post with github metadata</title><link href="https://richard5678.github.io/blog/2020/github-metadata/" rel="alternate" type="text/html" title="a post with github metadata" /><published>2020-09-28T21:01:00+00:00</published><updated>2020-09-28T21:01:00+00:00</updated><id>https://richard5678.github.io/blog/2020/github-metadata</id><content type="html" xml:base="https://richard5678.github.io/blog/2020/github-metadata/"><![CDATA[<p>A sample blog page that demonstrates the accessing of github meta data.</p>

<h2 id="what-does-github-metadata-do">What does Github-MetaData do?</h2>

<ul>
  <li>Propagates the site.github namespace with repository metadata</li>
  <li>Setting site variables :
    <ul>
      <li>site.title</li>
      <li>site.description</li>
      <li>site.url</li>
      <li>site.baseurl</li>
    </ul>
  </li>
  <li>Accessing the metadata - duh.</li>
  <li>Generating edittable links.</li>
</ul>

<h2 id="additional-reading">Additional Reading</h2>

<ul>
  <li>If you’re recieving incorrect/missing data, you may need to perform a Github API<a href="https://github.com/jekyll/github-metadata/blob/master/docs/authentication.md"> authentication</a>.</li>
  <li>Go through this <a href="https://jekyll.github.io/github-metadata/">README</a> for more details on the topic.</li>
  <li><a href="https://github.com/jekyll/github-metadata/blob/master/docs/site.github.md">This page</a> highlights all the feilds you can access with github-metadata.
<br /></li>
</ul>

<h2 id="example-metadata">Example MetaData</h2>

<ul>
  <li>Host Name :</li>
  <li>URL :</li>
  <li>BaseURL :</li>
  <li>Archived :</li>
  <li>Contributors :</li>
</ul>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><category term="metadata" /><summary type="html"><![CDATA[a quick run down on accessing github metadata.]]></summary></entry><entry><title type="html">a post with twitter</title><link href="https://richard5678.github.io/blog/2020/twitter/" rel="alternate" type="text/html" title="a post with twitter" /><published>2020-09-28T15:12:00+00:00</published><updated>2020-09-28T15:12:00+00:00</updated><id>https://richard5678.github.io/blog/2020/twitter</id><content type="html" xml:base="https://richard5678.github.io/blog/2020/twitter/"><![CDATA[<p>A sample blog page that demonstrates the inclusion of Tweets/Timelines/etc.</p>

<h1 id="tweet">Tweet</h1>

<p>An example of displaying a tweet:</p>
<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</div>

<h1 id="timeline">Timeline</h1>

<p>An example of pulling from a timeline:</p>
<div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<h1 id="additional-details">Additional Details</h1>

<p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><category term="formatting" /><summary type="html"><![CDATA[an example of a blog post with twitter]]></summary></entry><entry><title type="html">a post with bibliography</title><link href="https://richard5678.github.io/blog/2020/post-bibliography/" rel="alternate" type="text/html" title="a post with bibliography" /><published>2020-07-12T13:56:00+00:00</published><updated>2020-07-12T13:56:00+00:00</updated><id>https://richard5678.github.io/blog/2020/post-bibliography</id><content type="html" xml:base="https://richard5678.github.io/blog/2020/post-bibliography/"><![CDATA[<p>This post shows how to add bibliography to simple blog posts. We support every citation style that <a href="https://github.com/inukshuk/jekyll-scholar">jekyll-scholar</a> does. That means simple citation like (missing reference), multiple citations like (missing reference), long references like (missing reference) or also quotes:</p>

<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,<br />sed do eiusmod tempor.</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing.</p><cite>(missing reference)</cite></blockquote>

<p>If you would like something more academic, check the <a href="/blog/2021/distill/">distill style post</a>.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="formatting" /><category term="bib" /><summary type="html"><![CDATA[an example of a blog post with bibliography]]></summary></entry></feed>